//
//  MultipleAxesView.m
//  SciChartDemo
//
//  Created by Admin on 13.04.16.
//  Copyright Â© 2016 SciChart Ltd. All rights reserved.
//

#import "MultipleAxesView.h"
#import <SciChart/SciChart.h>

@implementation MultipleAxesView

@synthesize sciChartSurfaceView;
@synthesize surface;

-(instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    
    if (self) {
        SCIChartSurfaceView * view = [[SCIChartSurfaceView alloc]init];
        sciChartSurfaceView = view;
        
        [sciChartSurfaceView setTranslatesAutoresizingMaskIntoConstraints:NO];
        
        [self addSubview:sciChartSurfaceView];
        NSDictionary *layout = @{@"SciChart":sciChartSurfaceView};
        
        [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"|-(0)-[SciChart]-(0)-|" options:0 metrics:0 views:layout]];
        [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|-(0)-[SciChart]-(0)-|" options:0 metrics:0 views:layout]];
        
        [self initializeSurfaceData];
    }
    
    return self;
}

-(void) prepare {
    surface = [[SCIChartSurface alloc] initWithView: sciChartSurfaceView];
    
    [[surface style] setBackgroundBrush: [[SCIBrushSolid alloc] initWithColor:0xFF1e1c1c]];
    [[surface style] setSeriesBackgroundBrush:[[SCIBrushSolid alloc] initWithColor:0xFF1e1c1c]];
}

-(void) initializeSurfaceData {
    [self prepare];
    
    SCIPenSolid  *majorPen = [[SCIPenSolid alloc] initWithColor:0xFF393532 Width:0.5];
    SCIBrushSolid  *gridBandPen = [[SCIBrushSolid alloc] initWithColor:0xE1232120];
    SCIPenSolid  *minorPen = [[SCIPenSolid alloc] initWithColor:0xFF262423 Width:0.5];
    
    SCITextFormattingStyle *  textFormatting= [[SCITextFormattingStyle alloc] init];
    [textFormatting setFontSize: 16];
    [textFormatting setFontName: @"Helvetica"];
    [textFormatting setColor: 0xFFafb3b6];
    
    SCIAxisStyle * axisStyle = [[SCIAxisStyle alloc]init];
    [axisStyle setMajorTickBrush:majorPen];
    [axisStyle setGridBandBrush: gridBandPen];
    [axisStyle setMajorGridLineBrush:majorPen];
    [axisStyle setMinorTickBrush:minorPen];
    [axisStyle setMinorGridLineBrush:minorPen];
    [axisStyle setLabelStyle:textFormatting ];
    [axisStyle setDrawMinorGridLines:YES];
    [axisStyle setDrawMajorBands:YES];
    
    id<SCIAxis2DProtocol> axis = [[SCINumericAxis alloc] init];
    [axis setStyle: axisStyle];
    axis.axisId = @"Y1";
    [axis setGrowBy: [[SCIDoubleRange alloc]initWithMin:SCIGeneric(0.1) Max:SCIGeneric(0.1)]];
    [surface attachAxis:axis IsXAxis:NO];
    
    axis = [[SCINumericAxis alloc] init];
    axis.axisId = @"X1";
    [axis setStyle: axisStyle];
    [axis setGrowBy: [[SCIDoubleRange alloc]initWithMin:SCIGeneric(0.1) Max:SCIGeneric(0.1)]];
    [surface attachAxis:axis IsXAxis:YES];

    [axisStyle setDrawMinorGridLines:NO];
    [axisStyle setDrawMajorGridLines:NO];
    [axisStyle setDrawMajorBands:NO];
    axis = [[SCINumericAxis alloc] init];
    axis.axisId = @"Y2";
    [axis setStyle: axisStyle];
    [axis setGrowBy: [[SCIDoubleRange alloc]initWithMin:SCIGeneric(0.1) Max:SCIGeneric(0.1)]];
    [surface attachAxis:axis IsXAxis:NO];
    
    axis = [[SCINumericAxis alloc] init];
    axis.axisId = @"X2";
    [axis setStyle: axisStyle];
    [axis setGrowBy: [[SCIDoubleRange alloc]initWithMin:SCIGeneric(0.1) Max:SCIGeneric(0.1)]];
    [surface attachAxis:axis IsXAxis:YES];
    
    SCIAxisPinchZoomModifier * x1Pich = [SCIAxisPinchZoomModifier new];
    x1Pich.axisId = @"X1";
    SCIXAxisDragModifier * x1Drag = [SCIXAxisDragModifier new];
    x1Drag.axisId = @"X1";
    x1Drag.dragMode = SCIAxisDragMode_Scale;
    x1Drag.clipModeX = SCIClipMode_None;
    SCIAxisPinchZoomModifier * x2Pich = [SCIAxisPinchZoomModifier new];
    x2Pich.axisId = @"X2";
    SCIXAxisDragModifier * x2Drag = [SCIXAxisDragModifier new];
    x2Drag.axisId = @"X2";
    x2Drag.dragMode = SCIAxisDragMode_Scale;
    x2Drag.clipModeX = SCIClipMode_None;
    
    SCIAxisPinchZoomModifier * y1Pich = [SCIAxisPinchZoomModifier new];
    y1Pich.axisId = @"Y1";
    SCIYAxisDragModifier * y1Drag = [SCIYAxisDragModifier new];
    y1Drag.axisId = @"Y1";
    y1Drag.dragMode = SCIAxisDragMode_Pan;
    SCIAxisPinchZoomModifier * y2Pich = [SCIAxisPinchZoomModifier new];
    y2Pich.axisId = @"Y2";
    SCIYAxisDragModifier * y2Drag = [SCIYAxisDragModifier new];
    y2Drag.axisId = @"Y2";
    y2Drag.dragMode = SCIAxisDragMode_Pan;
    
    
    SCIPinchZoomModifier * pzm = [[SCIPinchZoomModifier alloc] init];
    SCIZoomExtentsModifier * zem = [[SCIZoomExtentsModifier alloc] init];
    SCIZoomPanModifier * zpm = [[SCIZoomPanModifier alloc] init];
    
    SCIChartModifierCollection * gm = [[SCIChartModifierCollection alloc] initWithChildModifiers:@[x1Pich, x2Pich, y1Pich, y2Pich,
                                                                               x1Drag, x2Drag, y1Drag, y2Drag,
                                                                               pzm, zem, zpm]];
    surface.chartModifiers = gm;
    surface.style.leftAxisAreaSize = 5;
    surface.style.topAxisAreaSize = 5;
    surface.style.bottomAxisAreaSize = 100;
    surface.style.rightAxisAreaSize = 100;
    surface.style.autoSizeAxes = NO;
    
    SCIXyDataSeries * priceDataSeries = [[SCIXyDataSeries alloc] initWithXType:SCIDataType_Float YType:SCIDataType_Float];
    int dataCount = 20;
    //Getting Fourier dataSeries
    for (int j = 0; j < dataCount; j++) {
        double time = 10 * j / (double)dataCount;
        double x = time;
        double y = arc4random_uniform(20);
        [priceDataSeries appendX:SCIGeneric(x) Y:SCIGeneric(y)];
    }
    
    SCIXyDataSeries * fourierDataSeries = [[SCIXyDataSeries alloc] initWithXType:SCIDataType_Float YType:SCIDataType_Float];
    dataCount = 1000;
    //Getting Fourier dataSeries
    for (int j = 0; j < dataCount; j++) {
        double time = 10 * j / (double)dataCount;
        double x = time;
        double y = 2 * sin(x)+10;
        [fourierDataSeries appendX:SCIGeneric(x) Y:SCIGeneric(y)];
    }
    
    priceDataSeries.dataDistributionCalculator = [SCIUserDefinedDistributionCalculator new];
    fourierDataSeries.dataDistributionCalculator = [SCIUserDefinedDistributionCalculator new];
    
    SCIEllipsePointMarker * ellipsePointMarker = [[SCIEllipsePointMarker alloc]init];
    [ellipsePointMarker setDrawBorder:YES];
    [ellipsePointMarker setFillBrush:[[SCIBrushSolid alloc] initWithColor:0xFFd6ffd7]];
    [ellipsePointMarker setHeight:5];
    [ellipsePointMarker setWidth:5];
    
    SCIFastLineRenderableSeries * priceRenderableSeries = [SCIFastLineRenderableSeries new];
    [priceRenderableSeries.style setPointMarker: ellipsePointMarker];
    [priceRenderableSeries.style setDrawPointMarkers: YES];
    [priceRenderableSeries setStrokeStyle: [[SCIPenSolid alloc] initWithColor:0xFF99EE99 Width:0.7]];
    [priceRenderableSeries setXAxisId: @"X1"];
    [priceRenderableSeries setYAxisId: @"Y1" ];
    [priceRenderableSeries setDataSeries:priceDataSeries];
    [surface attachRenderableSeries:priceRenderableSeries];
    
    SCIFastLineRenderableSeries * fourierRenderableSeries = [SCIFastLineRenderableSeries new];
    fourierRenderableSeries.strokeStyle = [[SCIPenSolid alloc] initWithColor:0xFF4c8aff Width:0.7];
    fourierRenderableSeries.xAxisId = @"X2";
    fourierRenderableSeries.yAxisId = @"Y2";
    [fourierRenderableSeries setDataSeries:fourierDataSeries];
    [surface attachRenderableSeries:fourierRenderableSeries];
    
    [surface invalidateElement];
}

@end
