<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Categories</key>
	<dict>
		<key>[1]Basic Chart Types</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Line Chart</string>
				<key>Description</key>
				<string>Generates an Line-Chart in code. The SCIFastLineRenderableSeries can be used to render an SCIXyDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>LineChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Digital Line Chart</string>
				<key>Description</key>
				<string>Generates a Digital Line-Chart in code. The SCIFastLineRenderableSeries can be used to render an SCIXyDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.line.digital</string>
				<key>FileName</key>
				<string>DigitalLineChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Columns Chart</string>
				<key>Description</key>
				<string>Generates a simple Column Series chart in code.</string>
				<key>IconName</key>
				<string>chart.series.column</string>
				<key>FileName</key>
				<string>ColumnChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Mountain Chart</string>
				<key>Description</key>
				<string>Generates a Mountain (Area) Chart in code. The SCIFastMountainRenderableSeries can be used to render an SCIXyDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.mountain</string>
				<key>FileName</key>
				<string>MountainChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Digital Mountain Chart</string>
				<key>Description</key>
				<string>Generates a Digital Mountain (Area) Chart in code. The SCIFastMountainRenderableSeries can be used to render an SCIXyDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.mountain</string>
				<key>FileName</key>
				<string>DigitalMountainChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Scatter Chart</string>
				<key>Description</key>
				<string>Generates a Scatter chart in code.</string>
				<key>IconName</key>
				<string>chart.series.scatter</string>
				<key>FileName</key>
				<string>ScatterSeriesChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Candlestick Chart</string>
				<key>Description</key>
				<string>Generates a simple Candlestick chart in code. The SCIFastCandlestickRenderableSeries can be used to render an SCIOhlcDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.candlestick</string>
				<key>FileName</key>
				<string>CandlestickChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Bubble Chart</string>
				<key>Description</key>
				<string>Generates an Bubble-Chart in code. The SCIFastBubbleRenderableSeries can be used to render an SCIXyzDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.bubble</string>
				<key>FileName</key>
				<string>BubbleChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Band Series Chart</string>
				<key>Description</key>
				<string>Generates a simple Band Series chart in code.</string>
				<key>IconName</key>
				<string>chart.series.band</string>
				<key>FileName</key>
				<string>BandChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Digital Band Series Chart</string>
				<key>Description</key>
				<string>Generates a simple Digital Band Series chart in code.</string>
				<key>IconName</key>
				<string>chart.series.band</string>
				<key>FileName</key>
				<string>DigitalBandChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Heatmap Chart</string>
				<key>Description</key>
				<string>Teaches how to create a real-time Heatmap using SciChart. Accepts a 2D Array of data and has a user-defined colour map which can be displayed as a legend over the chart.</string>
				<key>IconName</key>
				<string>chart.series.heatmap</string>
				<key>FileName</key>
				<string>HeatmapChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Impulse Chart</string>
				<key>Description</key>
				<string>Teaches how to use FastImpulseRenderableSeries to create an Impulse-response style chart. SCIFastImpulseRenderableSeries can be used to render data provided by SCIXyDataSeries.</string>
				<key>IconName</key>
				<string>chart.series.impulse</string>
				<key>FileName</key>
				<string>ImpulseChartView</string>
			</dict>
		</array>
		<key>[2]Chart Annotations</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Annotations are Easy</string>
				<key>Description</key>
				<string>Teaches how to use Annotations.</string>
				<key>IconName</key>
				<string>chart.annotation</string>
				<key>FileName</key>
				<string>AnnotationsAreEasyView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Interaction with Annotations</string>
				<key>Description</key>
				<string>Shows the intaraction with a huge variety of annotations</string>
				<key>IconName</key>
				<string>chart.annotation</string>
				<key>FileName</key>
				<string>InteractionWithAnnotations</string>
			</dict>
		</array>
		<key>[3]Create Custom Charts</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Spline Scatter Line Chart</string>
				<key>Description</key>
				<string>Generates a spline scatter-line chart in code.</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>SplineScatterLineChart</string>
			</dict>
		</array>
		<key>[4]Create a MultiSeries Chart</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Error Bars Chart</string>
				<key>Description</key>
				<string>Teaches how to add Error Bars to a Line or Scatter Chart.</string>
				<key>IconName</key>
				<string>chart.series.errorbar</string>
				<key>FileName</key>
				<string>ErrorBarsChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Fan Chart</string>
				<key>Description</key>
				<string>Teaches how to use multiple FastBandRenderableSeries to simulate a Fan Chart.</string>
				<key>IconName</key>
				<string>chart.series.fan</string>
				<key>FileName</key>
				<string>FanChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Stacked Mountain Chart</string>
				<key>Description</key>
				<string>Teaches how to use a Stacked Mountain Chart. The SCIStackedMountainRenderableSeries API can be used to render mountain/areas stacked one above another.</string>
				<key>IconName</key>
				<string>chart.series.stacked.mountain</string>
				<key>FileName</key>
				<string>StackedMountainChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Stacked Column Chart</string>
				<key>Description</key>
				<string>Teaches how to use a Stacked Column Chart. The SCIStackedColumnRenderableSeries API can be used to render columns stacked one above another, side by side, or a Left or Right aligned Bar Chart.</string>
				<key>IconName</key>
				<string>chart.series.stacked.column</string>
				<key>FileName</key>
				<string>StackedColumnChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Stacked Column Side By Side</string>
				<key>Description</key>
				<string>Teaches how to use a Stacked Column Chart to render the stacked columns side by side. The SCIStackedColumnRenderableSeries API can be used to render columns stacked one above another, side by side, or a Left or Right aligned Bar Chart.</string>
				<key>IconName</key>
				<string>chart.series.stacked.column</string>
				<key>FileName</key>
				<string>StackedColumnSideBySideChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Stacked Column 100%</string>
				<key>Description</key>
				<string>Showcase the many kinds of Stacked chart (Stacked Mountain, Stacked Column, 100% Stacked Column) available in SciChart.</string>
				<key>IconName</key>
				<string>chart.series.stacked.column100</string>
				<key>FileName</key>
				<string>StackedColumnFullFillChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Stacked Bar Chart</string>
				<key>Description</key>
				<string>Teaches how to create stacked bar chart. The SCIStackedColumnRenderableSeries API can be used to render columns stacked one above another, side by side, or a Left or Right aligned Bar Chart.</string>
				<key>IconName</key>
				<string>chart.series.stacked.bar</string>
				<key>FileName</key>
				<string>StackedBarChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Sync Multi Chart</string>
				<key>Description</key>
				<string>Showcases how to synchronize axis ranges across multiple charts</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>SyncMultipleChartsView</string>
			</dict>
		</array>
		<key>[5]Create Realtime Charts</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Fifo Scrolling Chart</string>
				<key>Description</key>
				<string>Shows the difference between FIFO and standard DataSeries. A FIFO series discards old data-points once a predefined number of points is met.</string>
				<key>IconName</key>
				<string>chart.realtime</string>
				<key>FileName</key>
				<string>FifoScrollingChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Performance Showcase</string>
				<key>Description</key>
				<string>Shows the speed and power of SciChart in a real-time example. Creates a threadpool timer and pushes 1000 points every 10ms to three series on the chart.</string>
				<key>IconName</key>
				<string>chart.realtime</string>
				<key>FileName</key>
				<string>PerformanceDemoView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Realtime Ghosted Traces</string>
				<key>Description</key>
				<string>This example shows persistence of old traces giving a &apos;ghosted&apos; effect. As new series are drawn older series are made increasingly transparent until they become invisible.</string>
				<key>IconName</key>
				<string>chart.realtime</string>
				<key>FileName</key>
				<string>RealTimeGhostTracesChartView</string>
			</dict>
		</array>
		<key>[6]Create Stock Charts</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Multiple-Pane Stock Chart</string>
				<key>Description</key>
				<string>A static multi-panel stock chart with Volume and Indicator panes.</string>
				<key>IconName</key>
				<string>chart.series.candlestick</string>
				<key>FileName</key>
				<string>MultiPaneStockChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Realtime Ticking Stock Chart</string>
				<key>Description</key>
				<string>Creates a real-time example with ticking stock charts.</string>
				<key>IconName</key>
				<string>chart.series.candlestick</string>
				<key>FileName</key>
				<string>RealtimeTickingStockChartView</string>
			</dict>
		</array>
		<key>[7]Legends</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Legend Chart</string>
				<key>Description</key>
				<string>Generates a simple Line-Chart with Chart Modifier.</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>LegendChartView</string>
			</dict>
		</array>
		<key>[8]Manipulate Series</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Add Points Performance Demo</string>
				<key>Description</key>
				<string>Showcases the super fast adding of SCIFastLineRenderableSeries with huge data sets.</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>AddPointsPerformanceChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Add Remove Series</string>
				<key>Description</key>
				<string>Teaches how to programmatically add and remove series in code</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>AddRemoveSeriesChartView</string>
			</dict>
		</array>
		<key>[9]Modify Axis Behavior</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Secondary Y-Axes</string>
				<key>Description</key>
				<string>A static example which shows a line chart with two series and primary and secondary Y-Axis.</string>
				<key>IconName</key>
				<string>chart.axis3d</string>
				<key>FileName</key>
				<string>SecondaryYAxesChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Multiple X-Axes</string>
				<key>Description</key>
				<string>A line chart with four series and multiple top / bottom X-Axis and left / right Y-Axis. SciChart supports multiple top or bottom X-Axes and multiple left and right Y-Axes. This example shows in a simple way how to register a line series on each axis.</string>
				<key>IconName</key>
				<string>chart.axis3d</string>
				<key>FileName</key>
				<string>MultipleAxesChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Logarithmic Axes</string>
				<key>Description</key>
				<string>This example shows X or Y logarithmic axis in SciChart. Click the controls in the toolbar to change state. Y-Axis and X-Axis set the respective axes to logarithmic or linear.</string>
				<key>IconName</key>
				<string>chart.axis3d</string>
				<key>FileName</key>
				<string>LogarithmicAxisChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Vertical Chart</string>
				<key>Description</key>
				<string>Showcase how to draw vertical chart</string>
				<key>IconName</key>
				<string>chart.axis3d</string>
				<key>FileName</key>
				<string>VerticalChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Shifted Axes</string>
				<key>Description</key>
				<string>Teaches how to place X and Y Axes at the Center of the SCIChartSurface.</string>
				<key>IconName</key>
				<string>chart.axis3d</string>
				<key>FileName</key>
				<string>ShiftedAxesView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Vertically Stacked Axes</string>
				<key>Description</key>
				<string>Teaches how to create a Vertically Stacked chart where multiple YAxis are occupying different locations on the chart. This allows series to overlap each other as they are on the same SciChartSurface.</string>
				<key>IconName</key>
				<string>chart.axis3d</string>
				<key>FileName</key>
				<string>VerticallyStackedYAxesView</string>
			</dict>
		</array>
		<key>[10]Styling and Theming</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Styling chart</string>
				<key>Description</key>
				<string>Teaches how to change colors of chart area and renderable series</string>
				<key>IconName</key>
				<string>chart.theme</string>
				<key>FileName</key>
				<string>StylingSciChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Custom Theme</string>
				<key>Description</key>
				<string>Teaches how to create and use a Custom Theme</string>
				<key>IconName</key>
				<string>chart.theme</string>
				<key>FileName</key>
				<string>CustomThemeView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Dashed Line Chart</string>
				<key>Description</key>
				<string>Teaches how to draw the Dashed Lines</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>DashedLineChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Using PaletteProvider</string>
				<key>Description</key>
				<string>Teaches how to use the PaletteProvider API to color lines and points individually.</string>
				<key>IconName</key>
				<string>chart.theme</string>
				<key>FileName</key>
				<string>UsePaletteProviderView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Using PointMarkers</string>
				<key>Description</key>
				<string>Showcase the PointMarker API which allows data-point markers to be added to many RenderableSeries types.</string>
				<key>IconName</key>
				<string>chart.series.scatter</string>
				<key>FileName</key>
				<string>UsingPointMarkersChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Using Theme Manager</string>
				<key>Description</key>
				<string>SciChart Ships with 7 stunning themes, which you can apply to your charts with a single line of code.</string>
				<key>IconName</key>
				<string>chart.theme</string>
				<key>FileName</key>
				<string>UsingThemeManagerView</string>
			</dict>
		</array>
		<key>[11]Tooltips and HitTest</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Hit-Test API</string>
				<key>Description</key>
				<string>Showcase the Hit-Test API, which can be used to get feedback about clicks on data-points or lines and enable selection, or showing of context menus.</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>HitTestAPIChart</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Using CursorModifier Tooltips</string>
				<key>Description</key>
				<string>Teaches how to use the CursorModifier API</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>UsingCursorModifierChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Using RolloverModifier Tooltips</string>
				<key>Description</key>
				<string>Teaches how to use the RolloverModifier API</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>UsingRolloverModifierChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Using TooltipModifier Tooltips</string>
				<key>Description</key>
				<string>Teaches how to use the TooltipModifier API</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>UsingTooltipModifierChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Series Selection</string>
				<key>Description</key>
				<string>Teaches how to use the SCISeriesSelectionModifier, which hooks into the ChartModifier API to select series</string>
				<key>IconName</key>
				<string>chart.annotation</string>
				<key>FileName</key>
				<string>SeriesSelectionView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Customization RolloverModifier</string>
				<key>Description</key>
				<string>Teaches how to customize SCIRolloverModifier</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>RolloverCustomizationChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Customization CursorModifier</string>
				<key>Description</key>
				<string>Teaches how to customize SCICursorModifier</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>CursorCustomizationChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Customization TooltipModifier</string>
				<key>Description</key>
				<string>Teaches how to customize SCITooltipModifier</string>
				<key>IconName</key>
				<string>chart.series.line</string>
				<key>FileName</key>
				<string>TooltipCustomizationChartView</string>
			</dict>
		</array>
		<key>[12]Zoom and Pan a Chart</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Drag Axis to Scale a Chart</string>
				<key>Description</key>
				<string>Showcases how to add Axis-Drag scaling to a SCIChartSurface using the SCIYAxisDragModifier and XAxisDragModifier. ChartModifiers can be added to the SCIChartSurface via the SciChartSurface.ChartModifier property, or via a SCIModifierGroup</string>
				<key>IconName</key>
				<string>chart.modifier.zoom</string>
				<key>FileName</key>
				<string>DragAxisToScaleChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Pan and Zoom a Chart</string>
				<key>Description</key>
				<string>Teaches how to use the SCIZoomPanModifier, part of the ChartModifier API, which allows panning the chart while dragging.</string>
				<key>IconName</key>
				<string>chart.modifier.pan</string>
				<key>FileName</key>
				<string>PanAndZoomChartView</string>
			</dict>
		</array>
		<key>[14]Create a Gauge Chart</key>
		<array>
			<dict>
				<key>Title</key>
				<string>Pie Chart</string>
				<key>Description</key>
				<string>Teaches how to create a Pie Chart. This is a circular chart type consisting of sectors which are proportional to the quantity it represents.</string>
				<key>IconName</key>
				<string>chart.2d</string>
				<key>FileName</key>
				<string>PieChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Donut Chart</string>
				<key>Description</key>
				<string>Teaches how to create a Donut Chart. This is a circular chart type consisting of segments which are proportional to the quantity it represents.</string>
				<key>IconName</key>
				<string>chart.2d</string>
				<key>FileName</key>
				<string>DonutChartView</string>
			</dict>
			<dict>
				<key>Title</key>
				<string>Multi Pie Donut Chart</string>
				<key>Description</key>
				<string>Teaches how to create a Pie-Donut Chart with multiple series. This is a circular chart type consisting of segments which are proportional to the quantity it represents.</string>
				<key>IconName</key>
				<string>chart.2d</string>
				<key>FileName</key>
				<string>MultiPieDonutChartView</string>
			</dict>
		</array>
	</dict>
</dict>
</plist>
