struct sGridParams {
  highp vec4 ContourScale;
  highp vec4 ContourOffset;
  highp vec4 ContourThickness;
  highp vec4 ContourColorX;
  highp vec4 ContourColorY;
  highp vec4 ContourColorZ;
  highp vec4 Params;
  highp vec4 SurfaceNormal;
  highp vec4 Lighting;
};
uniform highp mat4 matProj;
uniform highp mat4 matWorld;
uniform highp mat4 matWorldView;
uniform sampler2D HeightMapTexture;
uniform sampler2D HeightMapOffsetsTexture;
uniform highp vec4 TextureDimensionsInv;
uniform highp vec4 MeshCellOfssetScalePosition;
uniform highp vec4 MeshCellOfssetScaleTexCoord;
uniform highp vec4 MeshCellOfssetScaleHeights;
uniform highp vec4 ClipPlanes[6];
uniform sGridParams GridParams;
attribute highp vec4 vPosition;
attribute highp vec4 vTexCoord0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_COLOR4;
varying highp vec2 xlv_COLOR5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.w = vPosition.w;
  tmpvar_2.zw = vTexCoord0.zw;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec2 tmpvar_7;
  highp mat4 tmpvar_8;
  tmpvar_8 = (matWorldView * matProj);
  tmpvar_1.xz = ((vPosition.xz * MeshCellOfssetScalePosition.xy) + MeshCellOfssetScalePosition.zw);
  highp vec2 _texCoord_9;
  _texCoord_9 = ((vTexCoord0.xy * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_9.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_9.x);
  _texCoord_9.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_9.y);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DLod (HeightMapTexture, _texCoord_9, 0.0);
  tmpvar_1.y = (tmpvar_10.w * vPosition.w);
  highp vec3 vsNormal_11;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = matWorld[0].xyz;
  tmpvar_12[1] = matWorld[1].xyz;
  tmpvar_12[2] = matWorld[2].xyz;
  vsNormal_11 = (GridParams.SurfaceNormal.xyz * tmpvar_12);
  highp vec2 _texCoord_13;
  _texCoord_13 = ((vTexCoord0.zw * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_13.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_13.x);
  _texCoord_13.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_13.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DLod (HeightMapTexture, _texCoord_13, 0.0);
  highp float tmpvar_15;
  tmpvar_15 = GridParams.Params.w;
  highp float tmpvar_16;
  tmpvar_16 = mix (tmpvar_1.y, (tmpvar_14.w * vPosition.w), tmpvar_15);
  tmpvar_2.xy = mix (vTexCoord0.xy, vTexCoord0.zw, vec2(tmpvar_15));
  tmpvar_5 = tmpvar_2;
  tmpvar_2.xy = clamp (tmpvar_2.xy, 0.0, 1.0);
  tmpvar_2.xy = mix (TextureDimensionsInv.xy, TextureDimensionsInv.zw, tmpvar_2.xy);
  tmpvar_2.xy = ((tmpvar_2.xy * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  tmpvar_1.y = ((tmpvar_1.y * MeshCellOfssetScaleHeights.x) + MeshCellOfssetScaleHeights.y);
  tmpvar_4 = tmpvar_1;
  highp vec2 _texCoord_17;
  _texCoord_17 = ((tmpvar_2.xy * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_17.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_17.x);
  _texCoord_17.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_17.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DLod (HeightMapOffsetsTexture, _texCoord_17, 0.0);
  highp vec2 tmpvar_19;
  tmpvar_19 = tmpvar_18.xy;
  tmpvar_1.xz = (tmpvar_1.xz + tmpvar_19);
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_1 * matWorld);
  bvec4 tmpvar_21;
  tmpvar_21 = bvec4(ClipPlanes[0]);
  bool tmpvar_22;
  tmpvar_22 = any(tmpvar_21);
  highp float tmpvar_23;
  if (tmpvar_22) {
    highp vec4 tmpvar_24;
    tmpvar_24.w = 1.0;
    tmpvar_24.xyz = tmpvar_20.xyz;
    tmpvar_23 = dot (tmpvar_24, ClipPlanes[0]);
  } else {
    tmpvar_23 = 1.0;
  };
  tmpvar_6.x = tmpvar_23;
  bvec4 tmpvar_25;
  tmpvar_25 = bvec4(ClipPlanes[1]);
  bool tmpvar_26;
  tmpvar_26 = any(tmpvar_25);
  highp float tmpvar_27;
  if (tmpvar_26) {
    highp vec4 tmpvar_28;
    tmpvar_28.w = 1.0;
    tmpvar_28.xyz = tmpvar_20.xyz;
    tmpvar_27 = dot (tmpvar_28, ClipPlanes[1]);
  } else {
    tmpvar_27 = 1.0;
  };
  tmpvar_6.y = tmpvar_27;
  bvec4 tmpvar_29;
  tmpvar_29 = bvec4(ClipPlanes[2]);
  bool tmpvar_30;
  tmpvar_30 = any(tmpvar_29);
  highp float tmpvar_31;
  if (tmpvar_30) {
    highp vec4 tmpvar_32;
    tmpvar_32.w = 1.0;
    tmpvar_32.xyz = tmpvar_20.xyz;
    tmpvar_31 = dot (tmpvar_32, ClipPlanes[2]);
  } else {
    tmpvar_31 = 1.0;
  };
  tmpvar_6.z = tmpvar_31;
  bvec4 tmpvar_33;
  tmpvar_33 = bvec4(ClipPlanes[3]);
  bool tmpvar_34;
  tmpvar_34 = any(tmpvar_33);
  highp float tmpvar_35;
  if (tmpvar_34) {
    highp vec4 tmpvar_36;
    tmpvar_36.w = 1.0;
    tmpvar_36.xyz = tmpvar_20.xyz;
    tmpvar_35 = dot (tmpvar_36, ClipPlanes[3]);
  } else {
    tmpvar_35 = 1.0;
  };
  tmpvar_6.w = tmpvar_35;
  bvec4 tmpvar_37;
  tmpvar_37 = bvec4(ClipPlanes[4]);
  bool tmpvar_38;
  tmpvar_38 = any(tmpvar_37);
  highp float tmpvar_39;
  if (tmpvar_38) {
    highp vec4 tmpvar_40;
    tmpvar_40.w = 1.0;
    tmpvar_40.xyz = tmpvar_20.xyz;
    tmpvar_39 = dot (tmpvar_40, ClipPlanes[4]);
  } else {
    tmpvar_39 = 1.0;
  };
  tmpvar_7.x = tmpvar_39;
  bvec4 tmpvar_41;
  tmpvar_41 = bvec4(ClipPlanes[5]);
  bool tmpvar_42;
  tmpvar_42 = any(tmpvar_41);
  highp float tmpvar_43;
  if (tmpvar_42) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = tmpvar_20.xyz;
    tmpvar_43 = dot (tmpvar_44, ClipPlanes[5]);
  } else {
    tmpvar_43 = 1.0;
  };
  tmpvar_7.y = tmpvar_43;
  tmpvar_1.w = 1.0;
  tmpvar_3.xy = tmpvar_2.xy;
  tmpvar_3.zw = tmpvar_2.zw;
  gl_Position = (tmpvar_1 * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = vsNormal_11;
  xlv_TEXCOORD6 = tmpvar_16;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_COLOR4 = tmpvar_6;
  xlv_COLOR5 = tmpvar_7;
}

