struct sGridParams {
  highp vec4 ContourScale;
  highp vec4 ContourOffset;
  highp vec4 ContourThickness;
  highp vec4 ContourColorX;
  highp vec4 ContourColorY;
  highp vec4 ContourColorZ;
  highp vec4 Params;
  highp vec4 SurfaceNormal;
  highp vec4 Lighting;
};
uniform highp mat4 matProj;
uniform highp mat4 matWorld;
uniform highp mat4 matWorldView;
uniform sampler2D HeightMapTexture;
uniform sampler2D HeightMapOffsetsTexture;
uniform highp vec4 TextureDimensionsInv;
uniform highp vec4 MeshCellOfssetScalePosition;
uniform highp vec4 MeshCellOfssetScaleTexCoord;
uniform highp vec4 MeshCellOfssetScaleHeights;
uniform highp vec4 MeshCellSize;
uniform highp vec4 ClipPlanes[6];
uniform sGridParams GridParams;
attribute highp vec4 vPosition;
attribute highp vec4 vTexCoord0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_COLOR4;
varying highp vec2 xlv_COLOR5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.w = vPosition.w;
  tmpvar_2.zw = vTexCoord0.zw;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec2 tmpvar_7;
  highp mat4 tmpvar_8;
  tmpvar_8 = (matWorldView * matProj);
  tmpvar_1.xz = ((vPosition.xz * MeshCellOfssetScalePosition.xy) + MeshCellOfssetScalePosition.zw);
  highp vec2 _texCoord_9;
  highp vec2 tmpvar_10;
  tmpvar_10 = (vTexCoord0.xy * MeshCellOfssetScaleTexCoord.xy);
  _texCoord_9 = (tmpvar_10 + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_9.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_9.x);
  _texCoord_9.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_9.y);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DLod (HeightMapTexture, _texCoord_9, 0.0);
  tmpvar_1.y = (tmpvar_11.w * vPosition.w);
  highp vec3 vsNormal_12;
  highp vec3 vertexC_13;
  highp vec3 vertexB_14;
  highp vec3 vertexA_15;
  highp vec2 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = TextureDimensionsInv.x;
  highp vec2 tmpvar_17;
  tmpvar_17.x = 0.0;
  tmpvar_17.y = TextureDimensionsInv.y;
  vertexA_15.xz = vec2(0.0, 0.0);
  highp vec3 tmpvar_18;
  tmpvar_18.yz = vec2(0.0, 0.0);
  tmpvar_18.x = ((MeshCellSize.x * TextureDimensionsInv.x) * 2.0);
  vertexB_14.xz = tmpvar_18.xz;
  highp vec3 tmpvar_19;
  tmpvar_19.xy = vec2(0.0, 0.0);
  tmpvar_19.z = ((MeshCellSize.y * TextureDimensionsInv.y) * 2.0);
  vertexC_13.xz = tmpvar_19.xz;
  highp vec2 _texCoord_20;
  _texCoord_20 = (tmpvar_10 + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_20.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_20.x);
  _texCoord_20.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_20.y);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2DLod (HeightMapTexture, _texCoord_20, 0.0);
  vertexA_15.y = ((tmpvar_21.w * MeshCellOfssetScaleHeights.x) + MeshCellOfssetScaleHeights.y);
  highp vec2 _texCoord_22;
  _texCoord_22 = (((vTexCoord0.xy + tmpvar_16) * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_22.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_22.x);
  _texCoord_22.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_22.y);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DLod (HeightMapTexture, _texCoord_22, 0.0);
  vertexB_14.y = ((tmpvar_23.w * MeshCellOfssetScaleHeights.x) + MeshCellOfssetScaleHeights.y);
  highp vec2 _texCoord_24;
  _texCoord_24 = (((vTexCoord0.xy + tmpvar_17) * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_24.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_24.x);
  _texCoord_24.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_24.y);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DLod (HeightMapTexture, _texCoord_24, 0.0);
  vertexC_13.y = ((tmpvar_25.w * MeshCellOfssetScaleHeights.x) + MeshCellOfssetScaleHeights.y);
  highp vec3 a_26;
  a_26 = (vertexA_15 - vertexB_14);
  highp vec3 b_27;
  b_27 = (vertexA_15 - vertexC_13);
  highp mat3 tmpvar_28;
  tmpvar_28[0] = matWorld[0].xyz;
  tmpvar_28[1] = matWorld[1].xyz;
  tmpvar_28[2] = matWorld[2].xyz;
  vsNormal_12 = (-(normalize(
    ((a_26.yzx * b_27.zxy) - (a_26.zxy * b_27.yzx))
  )) * tmpvar_28);
  highp vec2 _texCoord_29;
  _texCoord_29 = ((vTexCoord0.zw * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_29.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_29.x);
  _texCoord_29.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_29.y);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DLod (HeightMapTexture, _texCoord_29, 0.0);
  highp float tmpvar_31;
  tmpvar_31 = GridParams.Params.w;
  highp float tmpvar_32;
  tmpvar_32 = mix (tmpvar_1.y, (tmpvar_30.w * vPosition.w), tmpvar_31);
  tmpvar_2.xy = mix (vTexCoord0.xy, vTexCoord0.zw, vec2(tmpvar_31));
  tmpvar_5 = tmpvar_2;
  tmpvar_2.xy = clamp (tmpvar_2.xy, 0.0, 1.0);
  tmpvar_2.xy = mix (TextureDimensionsInv.xy, TextureDimensionsInv.zw, tmpvar_2.xy);
  tmpvar_2.xy = ((tmpvar_2.xy * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  tmpvar_1.y = ((tmpvar_1.y * MeshCellOfssetScaleHeights.x) + MeshCellOfssetScaleHeights.y);
  tmpvar_4 = tmpvar_1;
  highp vec2 _texCoord_33;
  _texCoord_33 = ((tmpvar_2.xy * MeshCellOfssetScaleTexCoord.xy) + MeshCellOfssetScaleTexCoord.zw);
  _texCoord_33.x = mix (TextureDimensionsInv.x, TextureDimensionsInv.z, _texCoord_33.x);
  _texCoord_33.y = mix (TextureDimensionsInv.y, TextureDimensionsInv.w, _texCoord_33.y);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DLod (HeightMapOffsetsTexture, _texCoord_33, 0.0);
  highp vec2 tmpvar_35;
  tmpvar_35 = tmpvar_34.xy;
  tmpvar_1.xz = (tmpvar_1.xz + tmpvar_35);
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_1 * matWorld);
  bvec4 tmpvar_37;
  tmpvar_37 = bvec4(ClipPlanes[0]);
  bool tmpvar_38;
  tmpvar_38 = any(tmpvar_37);
  highp float tmpvar_39;
  if (tmpvar_38) {
    highp vec4 tmpvar_40;
    tmpvar_40.w = 1.0;
    tmpvar_40.xyz = tmpvar_36.xyz;
    tmpvar_39 = dot (tmpvar_40, ClipPlanes[0]);
  } else {
    tmpvar_39 = 1.0;
  };
  tmpvar_6.x = tmpvar_39;
  bvec4 tmpvar_41;
  tmpvar_41 = bvec4(ClipPlanes[1]);
  bool tmpvar_42;
  tmpvar_42 = any(tmpvar_41);
  highp float tmpvar_43;
  if (tmpvar_42) {
    highp vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = tmpvar_36.xyz;
    tmpvar_43 = dot (tmpvar_44, ClipPlanes[1]);
  } else {
    tmpvar_43 = 1.0;
  };
  tmpvar_6.y = tmpvar_43;
  bvec4 tmpvar_45;
  tmpvar_45 = bvec4(ClipPlanes[2]);
  bool tmpvar_46;
  tmpvar_46 = any(tmpvar_45);
  highp float tmpvar_47;
  if (tmpvar_46) {
    highp vec4 tmpvar_48;
    tmpvar_48.w = 1.0;
    tmpvar_48.xyz = tmpvar_36.xyz;
    tmpvar_47 = dot (tmpvar_48, ClipPlanes[2]);
  } else {
    tmpvar_47 = 1.0;
  };
  tmpvar_6.z = tmpvar_47;
  bvec4 tmpvar_49;
  tmpvar_49 = bvec4(ClipPlanes[3]);
  bool tmpvar_50;
  tmpvar_50 = any(tmpvar_49);
  highp float tmpvar_51;
  if (tmpvar_50) {
    highp vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = tmpvar_36.xyz;
    tmpvar_51 = dot (tmpvar_52, ClipPlanes[3]);
  } else {
    tmpvar_51 = 1.0;
  };
  tmpvar_6.w = tmpvar_51;
  bvec4 tmpvar_53;
  tmpvar_53 = bvec4(ClipPlanes[4]);
  bool tmpvar_54;
  tmpvar_54 = any(tmpvar_53);
  highp float tmpvar_55;
  if (tmpvar_54) {
    highp vec4 tmpvar_56;
    tmpvar_56.w = 1.0;
    tmpvar_56.xyz = tmpvar_36.xyz;
    tmpvar_55 = dot (tmpvar_56, ClipPlanes[4]);
  } else {
    tmpvar_55 = 1.0;
  };
  tmpvar_7.x = tmpvar_55;
  bvec4 tmpvar_57;
  tmpvar_57 = bvec4(ClipPlanes[5]);
  bool tmpvar_58;
  tmpvar_58 = any(tmpvar_57);
  highp float tmpvar_59;
  if (tmpvar_58) {
    highp vec4 tmpvar_60;
    tmpvar_60.w = 1.0;
    tmpvar_60.xyz = tmpvar_36.xyz;
    tmpvar_59 = dot (tmpvar_60, ClipPlanes[5]);
  } else {
    tmpvar_59 = 1.0;
  };
  tmpvar_7.y = tmpvar_59;
  tmpvar_1.w = 1.0;
  tmpvar_3.xy = tmpvar_2.xy;
  tmpvar_3.zw = tmpvar_2.zw;
  gl_Position = (tmpvar_1 * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = vsNormal_12;
  xlv_TEXCOORD6 = tmpvar_32;
  xlv_TEXCOORD7 = tmpvar_5;
  xlv_COLOR4 = tmpvar_6;
  xlv_COLOR5 = tmpvar_7;
}

