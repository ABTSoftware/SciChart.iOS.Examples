//******************************************************************************
// SCICHART® Copyright SciChart Ltd. 2011-2020. All rights reserved.
//
// Web: http://www.scichart.com
// Support: support@scichart.com
// Sales:   sales@scichart.com
//
// SCDMainMenuLayout.m is part of the SCICHART® Examples. Permission is hereby granted
// to modify, create derivative works, distribute and publish any part of this source
// code whether for commercial, private or personal use.
//
// The SCICHART® examples are distributed in the hope that they will be useful, but
// without any warranty. It is provided "AS IS" without warranty of any kind, either
// expressed or implied.
//******************************************************************************

#import "SCDMainMenuLayout.h"
#import "SCDMenuSeparatorView.h"

@implementation SCDMainMenuLayout

- (instancetype)init {
    self = [super init];
    if (self) {
        self.minimumLineSpacing = 0;
        self.minimumInteritemSpacing = 0;
        self.sectionInset = UIEdgeInsetsZero;
        [self registerClass:SCDMenuSeparatorView.class forDecorationViewOfKind:SCDMenuSeparatorView.reuseId];
    }
    return self;
}

- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {
    // Grab computed attributes from parent
    NSMutableArray *attributes = [NSMutableArray new];
    for (UICollectionViewLayoutAttributes *attr in [super layoutAttributesForElementsInRect:rect]) {
        // We are not allowed to modify attributes generated by the superclass,
        // as it caches the results, and will log "cache mismatched frame" messages otherwise
        [attributes addObject:[attr copy]];
    }
    
    NSMutableArray *decorationAttributes = [NSMutableArray array];
    NSArray *visibleIndexPaths = [self p_SCD_indexPathsOfSeparatorsInRect:rect];
    for (NSIndexPath *indexPath in visibleIndexPaths) {
        UICollectionViewLayoutAttributes *attributes = [self layoutAttributesForDecorationViewOfKind:SCDMenuSeparatorView.reuseId atIndexPath:indexPath];
        [decorationAttributes addObject:attributes];
    }
    
    return [attributes arrayByAddingObjectsFromArray:decorationAttributes];
}

- (NSArray *)p_SCD_indexPathsOfSeparatorsInRect:(CGRect)rect {
    int firstCellIndexToShow = floorf(rect.origin.y / self.itemSize.height);
    NSUInteger lastCellIndexToShow = floorf((rect.origin.y + CGRectGetHeight(rect)) / self.itemSize.height);
    NSUInteger countOfItems = [self.collectionView.dataSource collectionView:self.collectionView numberOfItemsInSection:0] - 1;
    
    NSMutableArray *indexPaths = [NSMutableArray array];
    for (NSUInteger i = MAX(firstCellIndexToShow, 0); i <= lastCellIndexToShow && i < countOfItems; i++) {
        [indexPaths addObject:[NSIndexPath indexPathForRow:i inSection:0]];
    }
    return indexPaths;
}

- (UICollectionViewLayoutAttributes *)layoutAttributesForDecorationViewOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath {
    UICollectionViewLayoutAttributes *attributes;
    if ([elementKind isEqualToString:SCDMenuSeparatorView.reuseId]) {
        attributes = [UICollectionViewLayoutAttributes layoutAttributesForDecorationViewOfKind:elementKind withIndexPath:indexPath];
        
        CGFloat originX, originY;
        if (self.scrollDirection == UICollectionViewScrollDirectionVertical) {
            originX = (self.itemSize.width - self.separatorSize.width) / 2.0;
            originY = (indexPath.item + 1) * self.itemSize.height;
        } else {
            originX = (indexPath.item + 1) * self.itemSize.width;
            originY = (self.itemSize.height - self.separatorSize.height) / 2.0;
        }

        attributes.frame = CGRectMake(originX, originY, self.separatorSize.width, self.separatorSize.height);
        attributes.zIndex = 1000;
    }
    
    return attributes;
}

// Needed to prevent of skewed separator view when rotation occurs
- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingDecorationElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)decorationIndexPath {
    UICollectionViewLayoutAttributes *layoutAttributes = [self layoutAttributesForDecorationViewOfKind:elementKind atIndexPath:decorationIndexPath];
    layoutAttributes.frame = CGRectZero;
    layoutAttributes.alpha = 0.0;
    return layoutAttributes;
}

// Needed to prevent of skewed separator view when rotation occurs
- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDisappearingDecorationElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)decorationIndexPath {
    UICollectionViewLayoutAttributes *layoutAttributes = [self layoutAttributesForDecorationViewOfKind:elementKind atIndexPath:decorationIndexPath];
    layoutAttributes.frame = CGRectZero;
    layoutAttributes.alpha = 1.0;
    return layoutAttributes;
}

@end
